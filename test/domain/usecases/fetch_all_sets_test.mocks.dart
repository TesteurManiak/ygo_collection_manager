// Mocks generated by Mockito 5.0.17 from annotations
// in ygo_collection_manager/test/domain/usecases/fetch_all_sets_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ygo_collection_manager/domain/entities/card_owned.dart' as _i6;
import 'package:ygo_collection_manager/domain/entities/ygo_card.dart' as _i2;
import 'package:ygo_collection_manager/domain/entities/ygo_set.dart' as _i5;
import 'package:ygo_collection_manager/domain/repository/ygopro_repository.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeYgoCard_0 extends _i1.Fake implements _i2.YgoCard {}

/// A class which mocks [YgoProRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockYgoProRepository extends _i1.Mock implements _i3.YgoProRepository {
  MockYgoProRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.YgoSet>> getAllSets({bool? shouldReload}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllSets, [], {#shouldReload: shouldReload}),
              returnValue: Future<List<_i5.YgoSet>>.value(<_i5.YgoSet>[]))
          as _i4.Future<List<_i5.YgoSet>>);
  @override
  _i4.Future<List<_i2.YgoCard>> getAllCards({bool? shouldReload}) => (super
      .noSuchMethod(
          Invocation.method(#getAllCards, [], {#shouldReload: shouldReload}),
          returnValue: Future<List<_i2.YgoCard>>.value(<_i2.YgoCard>[])) as _i4
      .Future<List<_i2.YgoCard>>);
  @override
  _i4.Future<_i2.YgoCard> getRandomCard() =>
      (super.noSuchMethod(Invocation.method(#getRandomCard, []),
              returnValue: Future<_i2.YgoCard>.value(_FakeYgoCard_0()))
          as _i4.Future<_i2.YgoCard>);
  @override
  _i4.Future<List<_i6.CardOwned>> getOwnedCards() =>
      (super.noSuchMethod(Invocation.method(#getOwnedCards, []),
              returnValue: Future<List<_i6.CardOwned>>.value(<_i6.CardOwned>[]))
          as _i4.Future<List<_i6.CardOwned>>);
  @override
  _i4.Future<bool> shouldReloadDb() =>
      (super.noSuchMethod(Invocation.method(#shouldReloadDb, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<int> getCopiesOfCardOwned(String? key) =>
      (super.noSuchMethod(Invocation.method(#getCopiesOfCardOwned, [key]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<void> updateCardOwned(_i6.CardOwned? card) =>
      (super.noSuchMethod(Invocation.method(#updateCardOwned, [card]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
